let $unwrap = wrapped => { let output = wrapped[0](); wrapped[0] = () => output; return output }
let v5 = [() => ($l => [() => ($r => [() => $unwrap($l) == $unwrap($r)])])]
let v6 = [() => ($l => [() => ($r => [() => $unwrap($l) > $unwrap($r)])])]
let v0 = [() => ($l => [() => ($r => [() => $unwrap($l) + $unwrap($r)])])]
let v4 = [() => ($l => [() => ($r => [() => $unwrap($l) % $unwrap($r)])])]
let v2 = [() => ($l => [() => ($r => [() => $unwrap($l) * $unwrap($r)])])]
let v3 = [() => ($l => [() => ($r => [() => $unwrap($l) / $unwrap($r)])])]
let v1 = [() => ($l => [() => ($r => [() => $unwrap($l) - $unwrap($r)])])]
let v13 = [() => ($ => [() => () => console.log($unwrap($))])]
let v12 = [() => ($1 => [() => ($2 => [() => () => { $unwrap($1)(); $unwrap($2)() }])])]
let v7 = [() => true]
let v8 = [() => false]
let v11 = [() => ($l => [() => ($r => [() => $unwrap($l) || $unwrap($r)])])]
let v10 = [() => ($l => [() => ($r => [() => $unwrap($l) && $unwrap($r)])])]
let v9 = [() => ($0 => [() => ($1 => [() => ($2 => [() => $unwrap($2) ? $unwrap($1) : $unwrap($0)])])])]
let v19 = [() => ($0 => [() => ($1 => [() => [$0, $1, ]])])]
let v20 = [() => ($value => [() => $unwrap($unwrap($value)[0])])]
let v21 = [() => ($value => [() => $unwrap($unwrap($value)[1])])]
let v18 = [() => []]
let v14 = [() => $unwrap(v0)]
let v22 = [() => $unwrap(v13)]
let v16 = [() => $unwrap(v2)]
let v17 = [() => $unwrap(v3)]
let v15 = [() => $unwrap(v1)]
let v25 = [() => ($ => [() => [1, $]])]
let v24 = [() => ($ => [() => [0, $]])]
let v23 = [() => ($0 => [() => ($1 => [() => ($sum => [() => { let $value = $unwrap($sum); if ($value[0] == 0) { return $unwrap($unwrap($0)($value[1])) } else if ($value[0] == 1) { return $unwrap($unwrap($1)($value[1])) } else { throw new Error('Sum type mismatch: $value[0] is not in range of possible branches!') } }])])])]
let v31 = [() => $unwrap($unwrap(v25)([() => $unwrap(v18)]))]
let v32 = [() => $unwrap($unwrap(v24)([() => $unwrap(v18)]))]
let v30 = [() => (v26 => [() => (v27 => [() => $unwrap($unwrap($unwrap(v23)([() => (v28 => [() => $unwrap(v26)])]))([() => (v29 => [() => $unwrap(v27)])]))])])]
let v34 = [() => $unwrap(v31)]
let v35 = [() => $unwrap(v32)]
let v36 = [() => $unwrap($unwrap($unwrap(v30)([() => $unwrap(v31)]))([() => $unwrap(v32)]))]
let v33 = [() => $unwrap(v30)]
let v39 = [() => ($ => [() => [1, $]])]
let v38 = [() => ($ => [() => [0, $]])]
let v37 = [() => ($0 => [() => ($1 => [() => ($sum => [() => { let $value = $unwrap($sum); if ($value[0] == 0) { return $unwrap($unwrap($0)($value[1])) } else if ($value[0] == 1) { return $unwrap($unwrap($1)($value[1])) } else { throw new Error('Sum type mismatch: $value[0] is not in range of possible branches!') } }])])])]
let v42 = [() => $unwrap($unwrap($unwrap(v37)([() => (v40 => [() => $unwrap(v34)])]))([() => (v41 => [() => $unwrap(v35)])]))]
let v51 = [() => $unwrap($unwrap((v49 => [() => (v50 => [() => $unwrap($unwrap(v49)([() => $unwrap(v50)]))])])([() => $unwrap(v13)]))([() => $unwrap($unwrap($unwrap(($0 => [() => ($1 => [() => ($2 => [() => $unwrap($2) ? $unwrap($1) : $unwrap($0)])])])([() => 555]))([() => $unwrap($unwrap(($l => [() => ($r => [() => $unwrap($l) + $unwrap($r)])])([() => 10]))([() => 20]))]))([() => $unwrap($unwrap(($l => [() => ($r => [() => $unwrap($l) || $unwrap($r)])])([() => $unwrap(v8)]))([() => $unwrap(v8)]))]))]))]
let v45 = [() => $unwrap(v39)]
let v48 = [() => (v47 => [() => $unwrap($unwrap(v36)([() => $unwrap($unwrap(v42)([() => $unwrap(v47)]))]))])]
let v46 = [() => $unwrap(v42)]
let v44 = [() => $unwrap(v38)]
let v43 = [() => $unwrap(v37)]
let v52 = [() => $unwrap(v51)]
let v55 = [() => $unwrap($unwrap((v53 => [() => (v54 => [() => $unwrap($unwrap(v53)([() => $unwrap(v54)]))])])([() => $unwrap(v22)]))([() => $unwrap($unwrap($unwrap(v5)([() => 10]))([() => 10]))]))]

// MAIN
$unwrap(v55)()