let $unwrap = wrapped => { let output = wrapped[0](); wrapped[0] = () => output; return output }
let v0 = [() => ($l => [() => ($r => [() => $unwrap($l) + $unwrap($r)])])]
let v2 = [() => ($l => [() => ($r => [() => $unwrap($l) * $unwrap($r)])])]
let v3 = [() => ($l => [() => ($r => [() => $unwrap($l) / $unwrap($r)])])]
let v1 = [() => ($l => [() => ($r => [() => $unwrap($l) - $unwrap($r)])])]
let v5 = [() => ($ => [() => () => console.log($unwrap($))])]
let v4 = [() => ($1 => [() => ($2 => [() => () => { $unwrap($1)(); $unwrap($2)() }])])]
let v11 = [() => ($0 => [() => ($1 => [() => [$0, $1, ]])])]
let v12 = [() => ($value => [() => $unwrap($unwrap($value)[0])])]
let v13 = [() => ($value => [() => $unwrap($unwrap($value)[1])])]
let v10 = [() => []]
let v6 = [() => $unwrap(v0)]
let v8 = [() => $unwrap(v2)]
let v9 = [() => $unwrap(v3)]
let v7 = [() => $unwrap(v1)]
let v16 = [() => ($ => [() => [1, $]])]
let v15 = [() => ($ => [() => [0, $]])]
let v14 = [() => ($0 => [() => ($1 => [() => ($sum => [() => { let $value = $unwrap($sum); if ($value[0] == 0) { return $unwrap($unwrap($0)($value[1])) } else if ($value[0] == 1) { return $unwrap($unwrap($1)($value[1])) } else { throw new Error('Sum type mismatch: $value[0] is not in range of possible branches!') } }])])])]
let v22 = [() => $unwrap($unwrap(v16)([() => $unwrap(v10)]))]
let v23 = [() => $unwrap($unwrap(v15)([() => $unwrap(v10)]))]
let v21 = [() => (v17 => [() => (v18 => [() => $unwrap($unwrap($unwrap(v14)([() => (v19 => [() => $unwrap(v17)])]))([() => (v20 => [() => $unwrap(v18)])]))])])]
let v25 = [() => $unwrap(v22)]
let v26 = [() => $unwrap(v23)]
let v27 = [() => $unwrap($unwrap($unwrap(v21)([() => $unwrap(v22)]))([() => $unwrap(v23)]))]
let v24 = [() => $unwrap(v21)]
let v30 = [() => ($ => [() => [1, $]])]
let v29 = [() => ($ => [() => [0, $]])]
let v28 = [() => ($0 => [() => ($1 => [() => ($sum => [() => { let $value = $unwrap($sum); if ($value[0] == 0) { return $unwrap($unwrap($0)($value[1])) } else if ($value[0] == 1) { return $unwrap($unwrap($1)($value[1])) } else { throw new Error('Sum type mismatch: $value[0] is not in range of possible branches!') } }])])])]
let v33 = [() => $unwrap($unwrap($unwrap(v28)([() => (v31 => [() => $unwrap(v25)])]))([() => (v32 => [() => $unwrap(v26)])]))]
let v36 = [() => $unwrap(v30)]
let v39 = [() => (v38 => [() => $unwrap($unwrap(v27)([() => $unwrap($unwrap(v33)([() => $unwrap(v38)]))]))])]
let v37 = [() => $unwrap(v33)]
let v35 = [() => $unwrap(v29)]
let v34 = [() => $unwrap(v28)]
let v46 = [() => $unwrap($unwrap((v40 => [() => (v41 => [() => $unwrap($unwrap(v40)([() => $unwrap(v41)]))])])([() => $unwrap(v5)]))([() => $unwrap($unwrap((v42 => [() => (v43 => [() => $unwrap($unwrap(v42)([() => $unwrap(v43)]))])])([() => $unwrap($unwrap((v44 => [() => (v45 => [() => $unwrap($unwrap(v45)([() => $unwrap(v44)]))])])([() => $unwrap($unwrap(($l => [() => ($r => [() => $unwrap($l) - $unwrap($r)])])([() => 100]))([() => 3]))]))([() => $unwrap(v6)]))]))([() => 20]))]))]
let v47 = [() => $unwrap($unwrap($unwrap(v4)([() => $unwrap($unwrap($unwrap(v4)([() => $unwrap($unwrap(v5)([() => "hello!!"]))]))([() => $unwrap($unwrap(v5)([() => "lol, those effects are chained!"]))]))]))([() => $unwrap(v46)]))]

// MAIN
$unwrap(v47)()