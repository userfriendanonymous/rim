let $unwrap = wrapped => { let output = wrapped[0](); wrapped[0] = () => output; return output }
let v5 = [() => ($l => [() => ($r => [() => $unwrap($l) == $unwrap($r)])])]
let v6 = [() => ($l => [() => ($r => [() => $unwrap($l) > $unwrap($r)])])]
let v0 = [() => ($l => [() => ($r => [() => $unwrap($l) + $unwrap($r)])])]
let v4 = [() => ($l => [() => ($r => [() => $unwrap($l) % $unwrap($r)])])]
let v2 = [() => ($l => [() => ($r => [() => $unwrap($l) * $unwrap($r)])])]
let v3 = [() => ($l => [() => ($r => [() => $unwrap($l) / $unwrap($r)])])]
let v1 = [() => ($l => [() => ($r => [() => $unwrap($l) - $unwrap($r)])])]
let v14 = [() => ($ => [() => () => console.log($unwrap($))])]
let v15 = [() => ($1 => [() => ($2 => [() => () => { $unwrap($1)(); $unwrap($2)() }])])]
let v13 = [() => ($0 => [() => () => { alert($unwrap($unwrap($0))) }])]
let v12 = [() => ($0 => [() => ($1 => [() => () => { setTimeout($unwrap($unwrap($1)), $unwrap($unwrap($0))) }])])]
let v7 = [() => true]
let v8 = [() => false]
let v11 = [() => ($l => [() => ($r => [() => $unwrap($l) || $unwrap($r)])])]
let v10 = [() => ($l => [() => ($r => [() => $unwrap($l) && $unwrap($r)])])]
let v9 = [() => ($0 => [() => ($1 => [() => ($2 => [() => $unwrap($2) ? $unwrap($1) : $unwrap($0)])])])]
let v16 = [() => []]
let v17 = [() => $unwrap(v16)]
let v19 = [() => (v18 => [() => $unwrap(v18)])]
let v39 = [() => ($ => [() => [1, $]])]
let v38 = [() => ($ => [() => [0, $]])]
let v37 = [() => ($0 => [() => ($1 => [() => ($sum => [() => { let $value = $unwrap($sum); if ($value[0] == 0) { return $unwrap($unwrap($0)($value[1])) } else if ($value[0] == 1) { return $unwrap($unwrap($1)($value[1])) } else { throw new Error('Sum type mismatch: $value[0] is not in range of possible branches!') } }])])])]
let v44 = [() => $unwrap(v39)]
let v43 = [() => $unwrap($unwrap(v38)([() => $unwrap(v17)]))]
let v42 = [() => (v40 => [() => $unwrap($unwrap(v37)([() => (v41 => [() => $unwrap(v40)])]))])]
let v56 = [() => (v50 => [() => (v51 => [() => (v52 => [() => $unwrap($unwrap($unwrap(v42)([() => $unwrap(v43)]))([() => (v53 => [() => $unwrap($unwrap((v54 => [() => (v55 => [() => $unwrap($unwrap(v54)([() => $unwrap(v55)]))])])([() => $unwrap(v44)]))([() => $unwrap($unwrap(v52)([() => $unwrap(v53)]))]))])]))])])])]
let v49 = [() => (v48 => [() => $unwrap(v42)])]
let v47 = [() => $unwrap(v44)]
let v46 = [() => $unwrap(v43)]
let v45 = [() => $unwrap(v42)]
let v22 = [() => 1]
let v21 = [() => 0]
let v20 = [() => ($0 => [() => ($1 => [() => ($enum => [() => { let $value = $unwrap($enum); if ($value == 0) { return $unwrap($0) } else if ($value == 1) { return $unwrap($1) } else { throw new Error('Enum type mismatch: $value is not in range of possible branches!') } }])])])]
let v23 = [() => $unwrap($unwrap($unwrap(v20)([() => $unwrap(v22)]))([() => $unwrap(v21)]))]
let v33 = [() => (v28 => [() => $unwrap($unwrap((v29 => [() => (v30 => [() => $unwrap($unwrap(v29)([() => $unwrap(v30)]))])])([() => $unwrap($unwrap((v31 => [() => (v32 => [() => $unwrap($unwrap(v31)([() => $unwrap(v32)]))])])([() => $unwrap(v20)]))([() => $unwrap($unwrap(v23)([() => $unwrap(v28)]))]))]))([() => $unwrap(v28)]))])]
let v26 = [() => $unwrap(v22)]
let v25 = [() => $unwrap(v21)]
let v36 = [() => (v35 => [() => $unwrap($unwrap($unwrap(v20)([() => $unwrap(v35)]))([() => $unwrap(v22)]))])]
let v27 = [() => $unwrap(v23)]
let v34 = [() => $unwrap($unwrap(v20)([() => $unwrap(v21)]))]
let v24 = [() => $unwrap(v20)]
let v59 = [() => ($ => [() => [1, $]])]
let v58 = [() => ($ => [() => [0, $]])]
let v57 = [() => ($0 => [() => ($1 => [() => ($sum => [() => { let $value = $unwrap($sum); if ($value[0] == 0) { return $unwrap($unwrap($0)($value[1])) } else if ($value[0] == 1) { return $unwrap($unwrap($1)($value[1])) } else { throw new Error('Sum type mismatch: $value[0] is not in range of possible branches!') } }])])])]
let v62 = [() => $unwrap(v59)]
let v61 = [() => $unwrap(v58)]
let v76 = [() => $unwrap($unwrap($unwrap(v57)([() => (v75 => [() => $unwrap(v46)])]))([() => $unwrap(v47)]))]
let v74 = [() => $unwrap($unwrap($unwrap(v57)([() => $unwrap(v47)]))([() => (v73 => [() => $unwrap(v46)])]))]
let v72 = [() => (v68 => [() => $unwrap($unwrap($unwrap(v57)([() => $unwrap(v58)]))([() => (v69 => [() => $unwrap($unwrap((v70 => [() => (v71 => [() => $unwrap($unwrap(v70)([() => $unwrap(v71)]))])])([() => $unwrap(v59)]))([() => $unwrap($unwrap(v68)([() => $unwrap(v69)]))]))])]))])]
let v67 = [() => (v63 => [() => $unwrap($unwrap($unwrap(v57)([() => (v64 => [() => $unwrap($unwrap((v65 => [() => (v66 => [() => $unwrap($unwrap(v65)([() => $unwrap(v66)]))])])([() => $unwrap(v58)]))([() => $unwrap($unwrap(v63)([() => $unwrap(v64)]))]))])]))([() => $unwrap(v59)]))])]
let v60 = [() => $unwrap(v57)]
let v77 = [() => ($0 => [() => ($1 => [() => [$0, $1, ]])])]
let v78 = [() => ($value => [() => $unwrap($unwrap($value)[0])])]
let v79 = [() => ($value => [() => $unwrap($unwrap($value)[1])])]
let v82 = [() => ($ => [() => [1, $]])]
let v80 = [() => ($0 => [() => ($1 => [() => ($sum => [() => { let $value = $unwrap($sum); if ($value[0] == 0) { return $unwrap($unwrap($0)($value[1])) } else if ($value[0] == 1) { return $unwrap($unwrap($1)($value[1])) } else { throw new Error('Sum type mismatch: $value[0] is not in range of possible branches!') } }])])])]
let v81 = [() => ($ => [() => [0, $]])]
let v88 = [() => (v84 => [() => (v85 => [() => $unwrap($unwrap((v86 => [() => (v87 => [() => $unwrap($unwrap(v86)([() => $unwrap(v87)]))])])([() => $unwrap(v82)]))([() => $unwrap($unwrap($unwrap(v77)([() => $unwrap(v84)]))([() => $unwrap(v85)]))]))])])]
let v97 = [() => (v89 => [() => (v90 => [() => $unwrap($unwrap($unwrap(v80)([() => (v91 => [() => $unwrap(v89)])]))([() => (v92 => [() => $unwrap($unwrap((v93 => [() => (v94 => [() => $unwrap($unwrap(v93)([() => $unwrap(v94)]))])])([() => $unwrap($unwrap((v95 => [() => (v96 => [() => $unwrap($unwrap(v95)([() => $unwrap(v96)]))])])([() => $unwrap(v90)]))([() => $unwrap($unwrap(v78)([() => $unwrap(v92)]))]))]))([() => $unwrap($unwrap(v79)([() => $unwrap(v92)]))]))])]))])])]
let v83 = [() => $unwrap($unwrap(v81)([() => $unwrap(v17)]))]
let v100 = [() => $unwrap(v88)]
let v103 = [() => $unwrap($unwrap($unwrap(v97)([() => $unwrap(v46)]))([() => (v101 => [() => (v102 => [() => $unwrap($unwrap(v47)([() => $unwrap(v101)]))])])]))]
let v98 = [() => $unwrap(v97)]
let v99 = [() => $unwrap(v83)]
let v104 = [() => $unwrap($unwrap(v14)([() => "Hello, world!"]))]

// MAIN
$unwrap(v104)()