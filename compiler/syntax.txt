id :: forall a . a -> a
forall x . Apply id x :: x
any :: forall a . a
convert :: (forall a . a) -> String
convert any :: String

any = (\f = f f) (\f = f f)

idk x = x + 1
+ :: Fn Num (Fn Num Num)
{ [x] = Num }
idk x :: Fn Num Num

Wrap (Fn N N)
Wrap (Fn S N)
Wrap (forall a . Fn a N)
forall a . Fn a N


cool x = x 10 + x "Hi!"
{ [x] = Fn Num xO
, [xO] = ? }

{ [x] = Fn String x1
, [x1] = ? }
+ x0 x1
{ [x0] = Num
, [x1] = Num }

{ [x] = forall a . Fn a  }

FLOW Finds bounds for (read <- write)
forall   . S -> N
forall a . a -> N

{ Bounds a = S }


MERGE Tries to find a lowest type that can act as both
forall a . a -> N
forall   . S -> N

forall a . a -> N { Bounds }

a b c -> Fn a b
a -> Fn S a
{ a = S, b = N }

log :: a -> Fn a String
main = log 10
a -> Fn a String
 -> Number
{ a = Number }
 -> Fn Number String
 -> String

Fn ( -> a) ( -> String)
Fn ( -> String) ( -> a)
{ a = String }
{ a = String }
a -> Fn ( -> String) ( -> String)
{ a = String }
 -> Fn ( -> Number) ( -> String)
 -> Fn ( -> String) ( -> String)

 -> Fn ( -> Some) ( -> String)
 -> Fn (a -> a) ( -> String)
 a Some

MERGE
a -> N
S -> N
forall x . x -> N
x -> Fn x
y -> Fn y
[x, y] = None
forall a b c . Fn a b c
a -> Fn String a
b -> b
{ }
a -> b -> c -> Fn (a -> a -> a)
b -> Fn (a -> b) b
b -> b
{ a = Fn (a -> a) b }
Fn (b -> b) String
Cons(Cons),
Application(F, I),

MERGE_BOUNDS
{ Bounds a = b = c -> Number }
{ Bounds a = b = d -> forall x . x }

{ Bounds a = b = c = d -> forall x . x }

forall   . (forall b . b) -> N
forall a . a -> N
{ Bounds a = Some (forall b . b) }

forall x . x
forall a . Maybe a

forall a . Maybe a
forall   . y
forall a . (y = Maybe a)


x = forall a . Maybe a
forall a . x

forall a .



a ->
    b ->
        a + b + 2

n -> (n -> n)

{ a = n }
forall . n -> (forall . n -> n)


type
    | unknown name
    | bound name
    | cons
        [polyType]

polyType
    [names] type

Fn Union Number
Fn 